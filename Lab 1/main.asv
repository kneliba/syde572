clear all;
close all;

%Case 1
n_a= 200;
n_b= 200;

u_a = [5, 10];
u_b = [10, 15];

cov_a = [8, 0; 0,4];
cov_b = [8, 0; 0, 4];

%Case 2
n_c = 100; 
n_d = 200; 
n_e = 150; 

u_c = [5, 10];
u_d = [15, 10];
u_e = [10, 5];

cov_c = [8, 4; 4, 40];
cov_d = [8, 0; 0, 8];
cov_e = [10, -5; -5, 20];

%% Part 2 Generating Clusters
[eig_vecs_a, eig_vals_a] = eig(cov_a); 
[eig_vecs_b, eig_vals_b] = eig(cov_b); 
[eig_vecs_c, eig_vals_c] = eig(cov_c); 
[eig_vecs_d, eig_vals_d] = eig(cov_d); 
[eig_vecs_e, eig_vals_e] = eig(cov_e); 

cluster_A = generate_clusters(n_a, u_a, cov_a);
cluster_B = generate_clusters(n_b, u_b, cov_b);
cluster_C = generate_clusters(n_c, u_c, cov_c);
cluster_D = generate_clusters(n_d, u_d, cov_d);
cluster_E = generate_clusters(n_e, u_e, cov_e);

% Case 1
theta_a = atan(eig_vecs_a(2,2)/eig_vecs_a(2,1));
theta_b = atan(eig_vecs_b(2,2)/eig_vecs_b(2,1));

figure(1)
hold on;
plot_ellipse(u_a(1),u_a(2),theta_a,sqrt(eig_vals_a(2,2)),sqrt(eig_vals_a(1,1)),'r')
plot_ellipse(u_b(1),u_b(2),theta_b,sqrt(eig_vals_b(2,2)),sqrt(eig_vals_b(1,1)),'b')
title('Unit Standard Deviation Contour: Class A & B','FontSize', 14);
xlabel('x1','FontSize', 14);
ylabel('x2','FontSize', 14);

scatter(cluster_A(:,1), cluster_A(:,2), "MarkerEdgeColor", [0.8500 0.3250 0.0980]);
scatter(cluster_B(:,1), cluster_B(:,2), "MarkerEdgeColor", "#0072BD");

plot(u_a(1), u_a(2), 'or', 'MarkerFaceColor','r');
plot(u_b(1), u_b(2), 'ob', 'MarkerFaceColor','b');
legend('Contour A', 'Contour B', 'Cluster A', 'Cluster B', 'mean A', 'mean B');

hold off

% Case 2
theta_c = atan(eig_vecs_c(2,2)/eig_vecs_c(2,1));
theta_d = atan(eig_vecs_d(2,2)/eig_vecs_d(2,1));
theta_e = atan(eig_vecs_e(2,2)/eig_vecs_e(2,1));

figure(2)
hold on;
plot_ellipse(u_c(1),u_c(2),theta_c,sqrt(eig_vals_c(2,2)),sqrt(eig_vals_c(1,1)),'r')
plot_ellipse(u_d(1),u_d(2),theta_d,sqrt(eig_vals_d(2,2)),sqrt(eig_vals_d(1,1)),'b')
plot_ellipse(u_e(1),u_e(2),theta_e,sqrt(eig_vals_e(2,2)),sqrt(eig_vals_e(1,1)),'g')


scatter(cluster_C(:,1), cluster_C(:,2), "MarkerEdgeColor", [0.8500 0.3250 0.0980]);
scatter(cluster_D(:,1), cluster_D(:,2), "MarkerEdgeColor", [0 0.4470 0.7410]);
scatter(cluster_E(:,1), cluster_E(:,2), "MarkerEdgeColor",[0.4660 0.6740 0.1880]);
title('Unit Standard Deviation Contour: Class C, D & E','FontSize', 14);
xlabel('x1','FontSize', 14);
ylabel('x2','FontSize', 14);

plot(u_c(1), u_c(2), 'or', 'MarkerFaceColor','r');
plot(u_d(1), u_d(2), 'ob', 'MarkerFaceColor','b');
plot(u_e(1), u_e(2), 'og', 'MarkerFaceColor','g');
legend('Contour C', 'Contour D', 'Contour E','Cluster C', 'Cluster D', 'Cluster E', 'mean C', 'mean D', 'mean E');

hold off

%% Part 3: Classifiers
grid_count = 1000;
epsilon = 0.01;
x_1 = linspace(min([min(cluster_A(:, 1)), min(cluster_B(:, 1))]), max([max(cluster_A(:, 1)), max(cluster_B(:, 1))]), grid_count);
y_1 = linspace(min([min(cluster_A(:, 2)), max(cluster_B(:, 2))]), max([max(cluster_A(:, 2)), max(cluster_B(:, 2))]), grid_count);
[X, Y] = meshgrid(x_1, y_1);

% Case 1 MED, GED & MAP
figure(3)
hold on;
plot_ellipse(u_a(1),u_a(2),theta_a,sqrt(eig_vals_a(2,2)),sqrt(eig_vals_a(1,1)),'r')
plot_ellipse(u_b(1),u_b(2),theta_b,sqrt(eig_vals_b(2,2)),sqrt(eig_vals_b(1,1)),'b')

scatter(cluster_A(:,1), cluster_A(:,2), "MarkerEdgeColor", [0.8500 0.3250 0.0980]);
scatter(cluster_B(:,1), cluster_B(:,2), "MarkerEdgeColor", "#0072BD");

plot(u_a(1), u_a(2), 'or', 'MarkerFaceColor','r');
plot(u_b(1), u_b(2), 'ob', 'MarkerFaceColor','b');

med_line_x = []; med_line_y = [];
ged_line_x = []; ged_line_y = [];
map_line_x = []; map_line_y = [];

med1_grid = java.util.Hashtable;
ged1_grid = java.util.Hashtable;
map1_grid = java.util.Hashtable;
for i = 1:grid_count
    for j = 1:grid_count
        point = [X(i, j), Y(i, j)];

        % MED
        d_a = sqrt((point - u_a) * (point - u_a).');
        d_b = sqrt((point - u_b) * (point - u_b).');
        if abs(d_a - d_b) < epsilon
            med_line_x = [med_line_x point(1)];
            med_line_y = [med_line_y point(2)];
        end
        if d_a < d_b
            med1_grid.put(num2str([i,j]), "a");
        else
            med1_grid.put(num2str([i,j]), "b");
        end


        % GED
        d_a = sqrt((point - u_a) * inv(cov_a) * (point - u_a).');
        d_b = sqrt((point - u_b) * inv(cov_b) * (point - u_b).');
        if abs(d_a - d_b) < epsilon
            ged_line_x = [ged_line_x point(1)];
            ged_line_y = [ged_line_y point(2)];
        end
        if d_a < d_b
            ged1_grid.put(num2str([i,j]), "a");
        else
            ged1_grid.put(num2str([i,j]), "b");
        end
        % MAP
        if abs(d_b^2 - d_a^2 - 2*log(n_b/n_a) - log(det(cov_a) / det(cov_b))) < epsilon
            map_line_x = [map_line_x point(1)];
            map_line_y = [map_line_y point(2)];
        end
        if d_b^2 - d_a^2 > 2*log(n_b/n_a) + log(det(cov_a) / det(cov_b))
            map1_grid.put(num2str([i,j]), "a");
        else
            map1_grid.put(num2str([i,j]), "b");
        end
    end
end

title('Case 1 MED, GED & MAP','FontSize', 14)
xlabel('x1','FontSize', 14);
ylabel('x2','FontSize', 14);
med = plot(med_line_x, med_line_y, '-k', 'LineWidth', 3, 'DisplayName','MED');
ged = plot(ged_line_x, ged_line_y, '-r', 'LineWidth', 3, 'DisplayName','GED');
map = plot(map_line_x, map_line_y, '-m', 'LineWidth', 3, 'DisplayName','MAP');
legend('Contour A', 'Contour B', 'Cluster A', 'Cluster B', 'mean A', 'mean B', 'MED', 'GED', 'MAP');
hold off

% Case 1 NN & 5NN
figure(4)
hold on;
plot_ellipse(u_a(1),u_a(2),theta_a,sqrt(eig_vals_a(2,2)),sqrt(eig_vals_a(1,1)),'r')
plot_ellipse(u_b(1),u_b(2),theta_b,sqrt(eig_vals_b(2,2)),sqrt(eig_vals_b(1,1)),'b')

scatter(cluster_A(:,1), cluster_A(:,2), "MarkerEdgeColor", [0.8500 0.3250 0.0980]);
scatter(cluster_B(:,1), cluster_B(:,2), "MarkerEdgeColor", "#0072BD");

plot(u_a(1), u_a(2), 'or', 'MarkerFaceColor','r');
plot(u_b(1), u_b(2), 'ob', 'MarkerFaceColor','b');

nn_line_x = []; nn_line_y = [];
knn_line_x = []; knn_line_y = [];

nn1_grid = java.util.Hashtable;
knn1_grid = java.util.Hashtable;
for i = 1:grid_count
    for j = 1:grid_count
        point = [X(i, j), Y(i, j)];
        d_A = sqrt(diag((cluster_A - point) * (cluster_A - point).'));
        d_B = sqrt(diag((cluster_B - point) * (cluster_B - point).'));
        
        % NN
        if abs(min(d_A) - min(d_B)) < epsilon
            nn_line_x = [nn_line_x point(1)];
            nn_line_y = [nn_line_y point(2)];
        end
        if min(d_A) < min(d_B)
            nn1_grid.put(num2str([i,j]), "a");
        else
            nn1_grid.put(num2str([i,j]), "b");
        end

        % 5NN
        if abs(mean(mink(d_A, 5)) - mean(mink(d_B, 5))) < epsilon
            knn_line_x = [knn_line_x point(1)];
            knn_line_y = [knn_line_y point(2)];
        end
        if mean(mink(d_A, 5)) <  mean(mink(d_B, 5))
            knn1_grid.put(num2str([i,j]), "a");
        else
            knn1_grid.put(num2str([i,j]), "b");
        end
    end
end

title('Case 1 NN & 5NN','FontSize', 14)
xlabel('x1','FontSize', 14) 
ylabel('x2','FontSize', 14) 
nn = plot(nn_line_x, nn_line_y, '.k', 'LineWidth', 3, 'DisplayName','NN');
knn = plot(knn_line_x, knn_line_y, '.r', 'LineWidth', 3, 'DisplayName','5NN');
legend('Contour A', 'Contour B', 'Cluster A', 'Cluster B', 'mean A', 'mean B', 'NN', '5NN');
hold off

% Case 2 MED, GED & MAP
x_2 = linspace(min([min(cluster_C(:, 1)), min(cluster_D(:, 1)), min(cluster_E(:, 1))]), max([max(cluster_D(:, 1)), max(cluster_B(:, 1)), max(cluster_E(:, 1))]), grid_count);
y_2 = linspace(min([min(cluster_C(:, 2)), min(cluster_D(:, 2)), min(cluster_E(:, 2))]), max([max(cluster_D(:, 2)), max(cluster_B(:, 2)), max(cluster_E(:, 2))]), grid_count);
[X, Y] = meshgrid(x_2, y_2);

figure(5)
hold on;
scatter(cluster_C(:,1), cluster_C(:,2), "MarkerEdgeColor", [0.8500 0.3250 0.0980]);
scatter(cluster_D(:,1), cluster_D(:,2), "MarkerEdgeColor", [0 0.4470 0.7410]);
scatter(cluster_E(:,1), cluster_E(:,2), "MarkerEdgeColor",[0.4660 0.6740 0.1880]);

plot_ellipse(u_c(1),u_c(2),theta_c,sqrt(eig_vals_c(2,2)),sqrt(eig_vals_c(1,1)),'r')
plot_ellipse(u_d(1),u_d(2),theta_d,sqrt(eig_vals_d(2,2)),sqrt(eig_vals_d(1,1)),'b')
plot_ellipse(u_e(1),u_e(2),theta_e,sqrt(eig_vals_e(2,2)),sqrt(eig_vals_e(1,1)),'g')

plot(u_c(1), u_c(2), 'or', 'MarkerFaceColor','r');
plot(u_d(1), u_d(2), 'ob', 'MarkerFaceColor','b');
plot(u_e(1), u_e(2), 'og', 'MarkerFaceColor','g');

med_line_x_1 = []; med_line_y_1 = [];
med_line_x_2 = []; med_line_y_2 = [];
med_line_x_3 = []; med_line_y_3 = [];
ged_line_x_1 = []; ged_line_y_1 = [];
ged_line_x_2 = []; ged_line_y_2 = [];
ged_line_x_3 = []; ged_line_y_3 = [];
map_line_x_1 = []; map_line_y_1 = [];
map_line_x_2 = []; map_line_y_2 = [];
map_line_x_3 = []; map_line_y_3 = [];

med2_grid = java.util.Hashtable;
ged2_grid = java.util.Hashtable;
map2_grid = java.util.Hashtable;

for i = 1:grid_count
    for j = 1:grid_count
        point = [X(i, j), Y(i, j)];
        % MED
        d_c = sqrt((point - u_c) * (point - u_c).');
        d_d = sqrt((point - u_d) * (point - u_d).');
        d_e = sqrt((point - u_e) * (point - u_e).');
        if abs(d_c - d_d) < epsilon && d_c < d_e
            med_line_x_1 = [med_line_x_1 point(1)];
            med_line_y_1 = [med_line_y_1 point(2)];
        end
        if abs(d_c - d_e) < epsilon && d_c < d_d
            med_line_x_2 = [med_line_x_2 point(1)];
            med_line_y_2 = [med_line_y_2 point(2)];
        end
        if abs(d_e - d_d) < epsilon && d_e < d_c
            med_line_x_3 = [med_line_x_3 point(1)];
            med_line_y_3 = [med_line_y_3 point(2)];
        end
        if min([d_c d_d d_e]) == d_c
            med2_grid.put(num2str([i,j]), "c");
        elseif min([d_c d_d d_e]) == d_d
            med2_grid.put(num2str([i,j]), "d");
        else
            med2_grid.put(num2str([i,j]), "e");
        end
        % GED
        d_c = sqrt((point - u_c) * inv(cov_c) * (point - u_c).');
        d_d = sqrt((point - u_d) * inv(cov_d) * (point - u_d).');
        d_e = sqrt((point - u_e) * inv(cov_e) * (point - u_e).');
        if abs(d_c - d_d) < epsilon && d_c < d_e
            ged_line_x_1 = [ged_line_x_1 point(1)];
            ged_line_y_1 = [ged_line_y_1 point(2)];
        end
        if abs(d_c - d_e) < epsilon && d_c < d_d
            ged_line_x_2 = [ged_line_x_2 point(1)];
            ged_line_y_2 = [ged_line_y_2 point(2)];
        end
        if abs(d_e - d_d) < epsilon && d_e < d_c
            ged_line_x_3 = [ged_line_x_3 point(1)];
            ged_line_y_3 = [ged_line_y_3 point(2)];
        end
        if min([d_c d_d d_e]) == d_c
            ged2_grid.put(num2str([i,j]), "c");
        elseif min([d_c d_d d_e]) == d_d
            ged2_grid.put(num2str([i,j]), "d");
        else
            ged2_grid.put(num2str([i,j]), "e");
        end

        % MAP
        d_cd = d_d^2 - d_c^2 - 2*log(n_d/n_c) - log(det(cov_c) / det(cov_d));
        d_ce = d_e^2 - d_c^2 - 2*log(n_e/n_c) - log(det(cov_c) / det(cov_e));
        d_ed = d_d^2 - d_e^2 - 2*log(n_d/n_e) - log(det(cov_e) / det(cov_d));
        if abs(d_cd) < epsilon && d_ce > 0
            map_line_x_1 = [map_line_x_1 point(1)];
            map_line_y_1 = [map_line_y_1 point(2)];
        end
        if abs(d_ce) < epsilon && d_cd > 0
            map_line_x_2 = [map_line_x_2 point(1)];
            map_line_y_2 = [map_line_y_2 point(2)];
        end
        if abs(d_ed) < epsilon && d_ce < 0
            map_line_x_3 = [map_line_x_3 point(1)];
            map_line_y_3 = [map_line_y_3 point(2)];
        end
        % if C is more likely than D and C is mroe likely than E
        if (d_cd > 0) && (d_ce > 0)
            map2_grid.put(num2str([i,j]), "c");
        elseif (d_cd < 0) && (d_ed < 0)
            map2_grid.put(num2str([i,j]), "d");
        elseif (d_ce < 0) && (d_ed > 0)
            map2_grid.put(num2str([i,j]), "e");
        end
    end
end

title('Case 2 MED, GED & MAP','FontSize', 14)
xlabel('x1','FontSize', 14) 
ylabel('x2','FontSize', 14) 
med = plot(med_line_x_1, med_line_y_1, '-k', med_line_x_2, med_line_y_2, '-k', med_line_x_3, med_line_y_3, '-k', 'LineWidth', 3, 'DisplayName','MED');
ged = plot(ged_line_x_1, ged_line_y_1, '-r', ged_line_x_2, ged_line_y_2, '-r', ged_line_x_3, ged_line_y_3, '-r', 'LineWidth', 3, 'DisplayName','GED');
map = plot(map_line_x_1, map_line_y_1, '-m', map_line_x_2, map_line_y_2, '-m', map_line_x_3, map_line_y_3, '-m', 'LineWidth', 3, 'DisplayName','MAP');
legend([med ged map])
hold off

% Case 2 NN, 5NN
figure(6)
hold on;
scatter(cluster_C(:,1), cluster_C(:,2), "MarkerEdgeColor", [0.8500 0.3250 0.0980]);
scatter(cluster_D(:,1), cluster_D(:,2), "MarkerEdgeColor", [0 0.4470 0.7410]);
scatter(cluster_E(:,1), cluster_E(:,2), "MarkerEdgeColor",[0.4660 0.6740 0.1880]);

plot_ellipse(u_c(1),u_c(2),theta_c,sqrt(eig_vals_c(2,2)),sqrt(eig_vals_c(1,1)),'r')
plot_ellipse(u_d(1),u_d(2),theta_d,sqrt(eig_vals_d(2,2)),sqrt(eig_vals_d(1,1)),'b')
plot_ellipse(u_e(1),u_e(2),theta_e,sqrt(eig_vals_e(2,2)),sqrt(eig_vals_e(1,1)),'g')

plot(u_c(1), u_c(2), 'or', 'MarkerFaceColor','r');
plot(u_d(1), u_d(2), 'ob', 'MarkerFaceColor','b');
plot(u_e(1), u_e(2), 'og', 'MarkerFaceColor','g');

nn_line_x = []; nn_line_y = [];
knn_line_x = []; knn_line_y = [];

nn2_grid = java.util.Hashtable;
knn2_grid = java.util.Hashtable;
for i = 1:grid_count
    for j = 1:grid_count
        point = [X(i, j), Y(i, j)];
        d_C = sqrt(diag((cluster_C - point) * (cluster_C - point).'));
        d_D = sqrt(diag((cluster_D - point) * (cluster_D - point).'));
        d_E = sqrt(diag((cluster_E - point) * (cluster_E - point).'));
        
        % NN
        d_c = min(d_C); d_d = min(d_D); d_e = min(d_E);
        if abs(d_c - d_d) < epsilon && d_c < d_e
            nn_line_x = [nn_line_x point(1)];
            nn_line_y = [nn_line_y point(2)];
        end
        if abs(d_c - d_e) < epsilon && d_c < d_d
            nn_line_x = [nn_line_x point(1)];
            nn_line_y = [nn_line_y point(2)];
        end
        if abs(d_e - d_d) < epsilon && d_e < d_c
            nn_line_x = [nn_line_x point(1)];
            nn_line_y = [nn_line_y point(2)];
        end
        if min([d_c d_d d_e]) == d_c
            nn2_grid.put(num2str([i,j]), "c");
        elseif min([d_c d_d d_e]) == d_d
            nn2_grid.put(num2str([i,j]), "d");
        else
            nn2_grid.put(num2str([i,j]), "e");
        end
        % 5NN
        d_c = mean(mink(d_C, 5)); d_d = mean(mink(d_D, 5)); d_e = mean(mink(d_E, 5));
        if abs(d_c - d_d) < epsilon && d_c < d_e
            knn_line_x = [knn_line_x point(1)];
            knn_line_y = [knn_line_y point(2)];
        end
        if abs(d_c - d_e) < epsilon && d_c < d_d
            knn_line_x = [knn_line_x point(1)];
            knn_line_y = [knn_line_y point(2)];
        end
        if abs(d_e - d_d) < epsilon && d_e < d_c
            knn_line_x = [knn_line_x point(1)];
            knn_line_y = [knn_line_y point(2)];
        end
        if min([d_c d_d d_e]) == d_c
            knn2_grid.put(num2str([i,j]), "c");
        elseif min([d_c d_d d_e]) == d_d
            knn2_grid.put(num2str([i,j]), "d");
        else
            knn2_grid.put(num2str([i,j]), "e");
        end
    end
end

title('Case 2 NN & 5NN','FontSize', 14)
xlabel('x1','FontSize', 14) 
ylabel('x2','FontSize', 14) 
nn = plot(nn_line_x, nn_line_y, '.k', 'LineWidth', 3, 'DisplayName','NN');
knn = plot(knn_line_x, knn_line_y, '.r', 'LineWidth', 3, 'DisplayName','5NN');
legend([nn knn])
hold off

%% Part 4 Error Analysis
% case 1
x1_min = x_1(1);
y1_min = y_1(1);
x1_max = x_1(grid_count);
y1_max = y_1(grid_count);
x1_stepsize = ((x1_max-x1_min)/grid_count);
y1_stepsize = ((y1_max-y1_min)/grid_count);

% MED
[TA, FA] = get_error(cluster_A, med1_grid, "a", x1_min, y1_min, x1_stepsize, y1_stepsize);
[TB, FB] = get_error(cluster_B, med1_grid, "b", x1_min, y1_min, x1_stepsize, y1_stepsize);

p = (FA + FB)/(length(cluster_A) + length(cluster_B));
confusion_matrix = [
    [TA, FB];
    [FA, TB];
];
disp(['Experimental Error Rate of Case 1 MED is: ', num2str(p)]);
disp('Confusion matrix for A & B:');
disp(confusion_matrix);

% GED
[TA, FA] = get_error(cluster_A, ged1_grid, "a", x1_min, y1_min, x1_stepsize, y1_stepsize);
[TB, FB] = get_error(cluster_B, ged1_grid, "b", x1_min, y1_min, x1_stepsize, y1_stepsize);

p = (FA + FB)/(length(cluster_A) + length(cluster_B));
confusion_matrix = [
    [TA, FB];
    [FA, TB];
];
disp(['Experimental Error Rate of Case 1 GED is: ', num2str(p)]);
disp('Confusion matrix for A & B:');
disp(confusion_matrix);

% MAP
[TA, FA] = get_error(cluster_A, map1_grid, "a", x1_min, y1_min, x1_stepsize, y1_stepsize);
[TB, FB] = get_error(cluster_B, map1_grid, "b", x1_min, y1_min, x1_stepsize, y1_stepsize);

p = (FA + FB)/(length(cluster_A) + length(cluster_B));
confusion_matrix = [
    [TA, FB];
    [FA, TB];
];
disp(['Experimental Error Rate of Case 1 MAP is: ', num2str(p)]);
disp('Confusion matrix for A & B:');
disp(confusion_matrix);

% NN
[TA, FA] = get_error(cluster_A, nn1_grid, "a", x1_min, y1_min, x1_stepsize, y1_stepsize);
[TB, FB] = get_error(cluster_B, nn1_grid, "b", x1_min, y1_min, x1_stepsize, y1_stepsize);

p = (FA + FB)/(length(cluster_A) + length(cluster_B));
confusion_matrix = [
    [TA, FB];
    [FA, TB];
];
disp(['Experimental Error Rate of Case 1 NN is: ', num2str(p)]);
disp('Confusion matrix for A & B:');
disp(confusion_matrix);

% 5NN
[TA, FA] = get_error(cluster_A, knn1_grid, "a", x1_min, y1_min, x1_stepsize, y1_stepsize);
[TB, FB] = get_error(cluster_B, knn1_grid, "b", x1_min, y1_min, x1_stepsize, y1_stepsize);

p = (FA + FB)/(length(cluster_A) + length(cluster_B));
confusion_matrix = [
    [TA, FB];
    [FA, TB];
];
disp(['Experimental Error Rate of Case 1 5NN is: ', num2str(p)]);
disp('Confusion matrix for A & B:');
disp(confusion_matrix);

% case 2
x2_min = x_2(1);
y2_min = y_2(1);
x2_max = x_2(grid_count);
y2_max = y_2(grid_count);
x2_stepsize = ((x2_max-x2_min)/grid_count);
y2_stepsize = ((y2_max-y2_min)/grid_count);

% MED
[TC, FCD, FCE] = get_error_case2(cluster_C, med2_grid, "c", "d", "e", x2_min, y2_min, x2_stepsize, y2_stepsize);
[TD, FDC, FDE] = get_error_case2(cluster_D, med2_grid, "d", "c", "e", x2_min, y2_min, x2_stepsize, y2_stepsize);
[TE, FEC, FED] = get_error_case2(cluster_E, med2_grid, "e", "c", "d", x2_min, y2_min, x2_stepsize, y2_stepsize);

p = 1 - (TC + TD + TE)/(length(cluster_C) + length(cluster_D) + length(cluster_E));
confusion_matrix = [
    [TC, FDC, FEC];
    [FCD, TD, FED];
    [FCE, FDE, TE];
];
disp(['Experimental Error Rate of Case 2 MED is: ', num2str(p)]);
disp('Confusion matrix for C D E:');
disp(confusion_matrix);

% GED
[TC, FCD, FCE] = get_error_case2(cluster_C, ged2_grid, "c", "d", "e", x2_min, y2_min, x2_stepsize, y2_stepsize);
[TD, FDC, FDE] = get_error_case2(cluster_D, ged2_grid, "d", "c", "e", x2_min, y2_min, x2_stepsize, y2_stepsize);
[TE, FEC, FED] = get_error_case2(cluster_E, ged2_grid, "e", "c", "d", x2_min, y2_min, x2_stepsize, y2_stepsize);

p = 1 - (TC + TD + TE)/(length(cluster_C) + length(cluster_D) + length(cluster_E));
confusion_matrix = [
    [TC, FDC, FEC];
    [FCD, TD, FED];
    [FCE, FDE, TE];
];
disp(['Experimental Error Rate of Case 2 GED is: ', num2str(p)]);
disp('Confusion matrix for C D E:');
disp(confusion_matrix);

% MAP
[TC, FCD, FCE] = get_error_case2(cluster_C, map2_grid, "c", "d", "e", x2_min, y2_min, x2_stepsize, y2_stepsize);
[TD, FDC, FDE] = get_error_case2(cluster_D, map2_grid, "d", "c", "e", x2_min, y2_min, x2_stepsize, y2_stepsize);
[TE, FEC, FED] = get_error_case2(cluster_E, map2_grid, "e", "c", "d", x2_min, y2_min, x2_stepsize, y2_stepsize);

p = 1 - (TC + TD + TE)/(length(cluster_C) + length(cluster_D) + length(cluster_E));
confusion_matrix = [
    [TC, FDC, FEC];
    [FCD, TD, FED];
    [FCE, FDE, TE];
];
disp(['Experimental Error Rate of Case 2 MAP is: ', num2str(p)]);
disp('Confusion matrix for C D E:');
disp(confusion_matrix);

% NN
[TC, FCD, FCE] = get_error_case2(cluster_C, nn2_grid, "c", "d", "e", x2_min, y2_min, x2_stepsize, y2_stepsize);
[TD, FDC, FDE] = get_error_case2(cluster_D, nn2_grid, "d", "c", "e", x2_min, y2_min, x2_stepsize, y2_stepsize);
[TE, FEC, FED] = get_error_case2(cluster_E, nn2_grid, "e", "c", "d", x2_min, y2_min, x2_stepsize, y2_stepsize);

p = 1 - (TC + TD + TE)/(length(cluster_C) + length(cluster_D) + length(cluster_E));
confusion_matrix = [
    [TC, FDC, FEC];
    [FCD, TD, FED];
    [FCE, FDE, TE];
];
disp(['Experimental Error Rate of Case 2 NN is: ', num2str(p)]);
disp('Confusion matrix for C D E:');
disp(confusion_matrix);

% 5NN
[TC, FCD, FCE] = get_error_case2(cluster_C, knn2_grid, "c", "d", "e", x2_min, y2_min, x2_stepsize, y2_stepsize);
[TD, FDC, FDE] = get_error_case2(cluster_D, knn2_grid, "d", "c", "e", x2_min, y2_min, x2_stepsize, y2_stepsize);
[TE, FEC, FED] = get_error_case2(cluster_E, knn2_grid, "e", "c", "d", x2_min, y2_min, x2_stepsize, y2_stepsize);

p = 1 - (TC + TD + TE)/(length(cluster_C) + length(cluster_D) + length(cluster_E));
confusion_matrix = [
    [TC, FDC, FEC];
    [FCD, TD, FED];
    [FCE, FDE, TE];
];
disp(['Experimental Error Rate of Case 2 5NN is: ', num2str(p)]);
disp('Confusion matrix for C D E:');
disp(confusion_matrix);
%% funcs
function clusters = generate_clusters(n, u, cov)
    clusters = repmat(u,n,1) + randn(n,2)*chol(cov);
end

function [ correct, incorrect ] = get_error(samp, grid, true_class,x1_min, y1_min, x1_stepsize, y1_stepsize)    
    correct = 0;
    N = length(samp);

    for i=1:N
        correct = correct + is_in_bound(samp(i,:), grid, true_class, x1_min, y1_min, x1_stepsize, y1_stepsize);
    end
    
    incorrect = N - correct;
end

function [ result ] = is_in_bound( point, grid, true_class, x_min, y_min, x_stepsize, y_stepsize)
    result = 0;
    [x,y] = deal(point(1), point(2));

    i_index = round((x-x_min)/x_stepsize);
    if i_index == 0
        i_index = 1;
    end 
    j_index = round((y-y_min)/y_stepsize);
    if j_index == 0
        j_index = 1;
    end 
    
    if grid.getOrDefault(num2str([i_index,j_index]), "z") == true_class
        result = 1;
    end
end

function [ correct, incorrect1, incorrect2 ] = get_error_case2(samp, grid, true_class, wrong_class1, wrong_class2, x2_min, y2_min, x2_stepsize, y2_stepsize)    
    correct = 0;
    incorrect1 = 0;
    incorrect2 = 0;
    N = length(samp);

    for i=1:N                                                                       
        correct = correct + is_in_bound(samp(i,:), grid, true_class, x2_min, y2_min, x2_stepsize, y2_stepsize);
        incorrect1 = incorrect1 + is_in_bound(samp(i,:), grid, wrong_class1, x2_min, y2_min, x2_stepsize, y2_stepsize);
        incorrect2 = incorrect2 + is_in_bound(samp(i,:), grid, wrong_class2, x2_min, y2_min, x2_stepsize, y2_stepsize);
    end
    
end